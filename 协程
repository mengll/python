yield 中的next 方式，只是回到上次执行的位置，不会给yield 传递相关的数据 而send f方法是调用next的方法并传递，相关的数据给yield 作为下次调用传递的值


#装饰器的实现的协程

def dp(uf):
    def pp(*args,**kwargs):
        b = uf(*args,**kwargs)
        next(b)
        return b
    return pp
@dp
def show(ssd):
    print "start ssd"
    yield ssd
    print "the end"

po =show("funck")
next(po)

#装饰器是返回一个高阶函数的函数 对象可迭代，和迭代器的区别
#字符串，tuple list 对象是可迭代的，但是不是不是迭代器对象
from collections import Iterator,Iterable
isinstance("",Iterator) #判断当前的对象是否是迭代器对象
isinstance("",Iterable) #判断当前对象是否是可迭代
iter("") #将数据转换成迭代器对象 可使用next的方法去执行获取相关的返回值
